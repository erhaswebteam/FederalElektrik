@model CustomerNavigationModel 
<div id="block-account-navigation" class="block block-account-navigation">
   <h2 class="h5 generalTitle d-none d-lg-block">
      <strong>@T("Account.Navigation")</strong>
   </h2>
   <h2 class="h5 bg-light p-3 d-lg-none">
      <strong>@T("Account.Navigation")</strong>
      <i id="computers" class="fa fa-angle-down float-xs-right"></i>
   </h2>
   <ul class="list viewBox">
       @await Component.InvokeAsync("Widget", new { widgetZone = "account_navigation_before" }) @if (!Model.HideInfo)
       {
           <li class="customer-info">
               <a href="@Url.RouteUrl("CustomerInfo")">@T("Account.CustomerInfo")</a>
           </li>
       } @if (!Model.HideAddresses)
       {
           <li class="customer-addresses">
               <a href="@Url.RouteUrl("CustomerAddresses")">@T("Account.CustomerAddresses")</a>
           </li>
       } @if (!Model.HideOrders)
       {
           <li class="customer-orders">
               <a href="@Url.RouteUrl("CustomerOrders")">@T("Account.CustomerOrders")</a>
           </li>
       } @if (!Model.HideAuctions)
       {
           <li class="customer-auctions">
               <a href="@Url.RouteUrl("CustomerAuctions")">@T("Account.CustomerAuctions")</a>
           </li>
       } @if (!Model.HideReturnRequests)
       {
           <li class="customer-returns">
               <a href="@Url.RouteUrl("CustomerReturnRequests")">@T("Account.CustomerReturnRequests")</a>
           </li>
       } @if (!Model.HideDownloadableProducts)
       {
           <li class="customer-downloadable">
               <a href="@Url.RouteUrl("CustomerDownloadableProducts")">@T("Account.DownloadableProducts")</a>
           </li>
       } @if (!Model.HideBackInStockSubscriptions)
       {
           <li class="customer-back">
               <a href="@Url.RouteUrl("CustomerBackInStockSubscriptions")">@T("Account.BackInStockSubscriptions")</a>
           </li>
       } @if (!Model.HideRewardPoints)
       {
           <li class="reward-points">
               <a href="@Url.RouteUrl("CustomerRewardPoints")">@T("Account.RewardPoints")</a>
           </li>
       } @if (!Model.HideChangePassword)
       {
           <li class="change-password">
               <a href="@Url.RouteUrl("CustomerChangePassword")">@T("Account.ChangePassword")</a>
           </li>
       } @if (!Model.HideDeleteAccount)
       {
           <li class="customer-delete">
               <a href="@Url.RouteUrl("CustomerDeleteAccount")">@T("Account.DeleteAccount")</a>
           </li>
       } @if (!Model.HideAvatar)
       {
           <li class="customer-avatar">
               <a href="@Url.RouteUrl("CustomerAvatar")">@T("Account.Avatar")</a>
           </li>
       } @if (!Model.HideForumSubscriptions)
       {
           <li class="customer-forum">
               <a href="@Url.RouteUrl("CustomerForumSubscriptions")">@T("Account.ForumSubscriptions")</a>
           </li>
       } @if (Model.ShowVendorInfo)
       {
           <li class="customer-vendor">
               <a href="@Url.RouteUrl("CustomerVendorInfo")">@T("Account.VendorInfo")</a>
           </li>
       }
       <li class="reward-points">
           <a href="/customer/processhistory">@T("Account.RewardPoints")</a>
       </li>
       @if (Model.HideMyRegisterDealer)
       {
           <li class="reward-points">
               <a href="/customer/myregisterdealer">@T("Account.MyRegisterDealer")</a>
           </li>
       }

       @*<li class="customer-addresses">
            <a href="/customer/add">@T("Account.CustomerAdd")</a>
        </li>
        <li class="reward-points">
            <a href="/customer/pointtransfer">@T("Account.PointTransfer")</a>
        </li>*@


       @await Component.InvokeAsync("Widget", new { widgetZone = "account_navigation_after" })

   </ul>
</div>
<script>
   $(document).ready(function() {
     $(".generalLeftSide").css("padding-right", "0");
   });
</script>